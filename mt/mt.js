// Generated by CoffeeScript 1.10.0
var ConfigForm, GameComponent, MTMain, MinMaxSelector, NumberSelector, a, br, button, combinePairs, cxs, div, dup, el, form, game, gameInitialState, gameParamValid, gameParams, gameParamsDefaults, gameParamsInitialState, getRandomsCxs, gxs, h1, h2, h3, h4, img, input, isGtZero, label, li, local, make, memoryLogic, option, p, parseQueryParams, prepareTesting, ref, render, saveDup, select, small, span, speak, startingGameState, store, strong, ul, wrongAnswerState,
  slice = [].slice;

NumberSelector = React.createClass({
  label: function() {
    return this.props.label || 'Value';
  },
  render: function() {
    return div({
      className: "form-group " + (this.props.hasError ? 'has-error' : void 0)
    }, label({}, this.label() + ': ', div({
      className: 'input-group'
    }, input({
      type: 'number',
      className: "form-control",
      value: this.props.value,
      onChange: this.props.onChange,
      step: 'any',
      min: this.props.min,
      max: this.props.max
    }))));
  }
});

MinMaxSelector = React.createClass({
  handleChange: function(fld, e) {
    return store.dispatch({
      type: 'changeVal',
      prop: fld,
      val: e.target.value
    });
  },
  render: function() {
    return span({}, el(NumberSelector, {
      label: 'Min',
      value: this.props.min,
      onChange: this.handleChange.bind(this, 'min'),
      hasError: this.props.error
    }), el(NumberSelector, {
      label: 'Max',
      value: this.props.max,
      onChange: this.handleChange.bind(this, 'max'),
      hasError: this.props.error
    }));
  }
});

ConfigForm = React.createClass({
  startGame: function(e) {
    e.preventDefault();
    if (!this.props.error) {
      return store.dispatch({
        type: 'startGame'
      });
    }
  },
  render: function() {
    return div({
      className: ''
    }, p({
      className: "lead"
    }, 'The game is not started yet. Select training time and press Start.'), form({
      className: "",
      onSubmit: this.startGame
    }, el(NumberSelector, {
      label: 'Number of pairs',
      value: this.props.numberOfPairs,
      onChange: this.numberOfPairsChanged,
      hasError: this.props.error,
      min: 1,
      max: gxs.length
    }), div({
      className: "form-group"
    }, label({}, 'On wrong answer: '), select({
      className: "form-control",
      defaultValue: this.props.onWrongAnswer,
      onChange: this.onWrongAnswerChanged,
      style: {
        width: 'auto'
      }
    }, option({
      value: 'retry'
    }, 'Retry same picture'), option({
      value: 'restart'
    }, 'Restart test'), option({
      value: 'learning'
    }, 'Restart learning'), option({
      value: 'randomize'
    }, 'Randomize then restart learning'))), button({
      type: "submit",
      className: "btn btn-primary btn-lg",
      disabled: this.props.error
    }, 'Start training2')));
  },
  numberOfPairsChanged: function(e) {
    return store.dispatch({
      type: 'numberOfPairsChanged',
      value: e.target.value
    });
  },
  onWrongAnswerChanged: function(e) {
    return store.dispatch({
      type: 'onWrongAnswerChanged',
      value: e.target.value
    });
  }
});

GameComponent = React.createClass({
  getInitialState: function() {
    return {
      disabledContinue: true
    };
  },
  componentDidMount: function() {
    return this.interval = setInterval((function(_this) {
      return function() {
        var allLoaded;
        allLoaded = true;
        $('.observedImage').each(function(_, img) {
          return allLoaded && (allLoaded = img.complete && img.naturalWidth > 0);
        });
        if (allLoaded === _this.state.disabledContinue) {
          return _this.setState({
            disabledContinue: !allLoaded
          });
        }
      };
    })(this), 100);
  },
  componentWillUnmount: function() {
    if (this.interval) {
      return clearInterval(this.interval);
    }
  },
  render: function() {
    return div({}, this.props.wrongAnswer ? this.renderWrongAnswer() : this.props.finished ? this.renderFinished() : this.learningPhase() ? this.renderLearning() : this.renderTesting(), this.renderPreloader());
  },
  renderWrongAnswer: function() {
    return div({
      className: "jumbotron"
    }, h3({}, "Oops! Wrong answer! You need to " + (this.wrongAnswerReaction()) + "."), div({
      className: 'row',
      style: {
        marginTop: 25
      }
    }, button({
      type: "submit",
      className: "btn btn-primary btn-lg center-block",
      onClick: this.clearWrongAnswer
    }, 'Continue')));
  },
  clearWrongAnswer: function() {
    return store.dispatch({
      type: 'clearWrongAnswer'
    });
  },
  renderFinished: function() {
    return div({
      className: "jumbotron"
    }, h1({}, 'Congratulations! You passed!'), div({
      className: 'row',
      style: {
        marginTop: 25
      }
    }, button({
      type: "submit",
      className: "btn btn-success btn-lg center-block",
      onClick: this.newGame
    }, 'Start another game')));
  },
  newGame: function() {
    return store.dispatch({
      type: 'newGame'
    });
  },
  renderLearning: function() {
    return div({}, this.currentPair() ? this.renderLearningPair() : this.renderLearningIntro(), div({
      className: 'row',
      style: {
        marginTop: 25
      }
    }, button({
      type: "submit",
      className: "btn btn-primary btn-lg center-block",
      onClick: this.nextLearning,
      disabled: this.state.disabledContinue
    }, this.state.disabledContinue ? span({}, img({
      src: '../vendor/gears.gif'
    }), ' Caching images...') : 'Continue')));
  },
  renderLearningIntro: function() {
    return div({
      className: "jumbotron"
    }, h1({}, 'Learning phase'), p({}, "You're going to see " + this.props.pairs.length + " pairs of images. Try to remember which image goes with which."));
  },
  renderLearningPair: function() {
    return div({
      className: 'row'
    }, div({
      className: 'col-xs-6'
    }, this.gxImage()), div({
      className: 'col-xs-6'
    }, this.cxImage()));
  },
  renderTesting: function() {
    if (this.currentPair()) {
      return this.renderTestingPair();
    } else {
      return this.renderTestingIntro();
    }
  },
  renderTestingPair: function() {
    return div({
      className: 'row'
    }, div({
      className: 'col-xs-6'
    }, this.gxImage()), div({
      className: 'col-xs-6'
    }, this.renderCxs()));
  },
  renderTestingIntro: function() {
    return div({
      className: "jumbotron"
    }, h1({}, 'Testing phase'), p({}, "Now it's time for your test. You must match image pairs that you saw earlier. Click on the correct image to proceed."), div({
      className: 'row',
      style: {
        marginTop: 25
      }
    }, button({
      type: "submit",
      className: "btn btn-primary btn-lg center-block",
      onClick: this.nextTest
    }, 'Continue')));
  },
  wrongAnswerReaction: function() {
    switch (store.getState().gameParams.onWrongAnswer) {
      case 'retry':
        return 'retry this picture';
      case 'restart':
        return 'restart the test';
      case 'learning':
        return 'repeat the learning of the same pairs';
      case 'randomize':
        return 'learn a new set of pairs';
    }
  },
  renderCxs: function() {
    var cxs;
    cxs = _.shuffle(this.currentPair().slice(1));
    return div({}, _.map(cxs, (function(_this) {
      return function(cx) {
        return div({
          className: 'row',
          key: cx
        }, _this.smallCxImage(cx));
      };
    })(this)));
  },
  currentPair: function() {
    if (this.learningPhase()) {
      return this.props.pairs[this.props.currentLearning];
    } else {
      return this.props.pairs[this.props.currentTest];
    }
  },
  learningPhase: function() {
    return 'learning' === this.props.phase;
  },
  gxImage: function() {
    return this.halfSizeImage(this.currentPair()[0], 'right');
  },
  cxImage: function() {
    return this.halfSizeImage(this.currentPair()[1], 'left');
  },
  halfSizeImage: function(url, align) {
    return img({
      src: url,
      className: 'observedImage',
      style: {
        maxHeight: '80vh',
        maxWidth: '100%',
        float: align
      }
    });
  },
  smallCxImage: function(url, align) {
    if (align == null) {
      align = 'left';
    }
    return img({
      src: url,
      className: 'observedImage',
      style: {
        maxHeight: '25vh',
        maxWidth: '100%',
        float: align,
        marginBottom: 10,
        cursor: 'pointer'
      },
      onClick: this.checkAnswer
    });
  },
  checkAnswer: function(e) {
    if (e.target.src === this.currentPair()[1]) {
      return store.dispatch({
        type: 'nextTest'
      });
    } else {
      return store.dispatch({
        type: 'wrongAnswer'
      });
    }
  },
  nextLearning: function() {
    this.setState({
      disabledContinue: true
    });
    return store.dispatch({
      type: 'nextLearning'
    });
  },
  nextTest: function() {
    return store.dispatch({
      type: 'nextTest'
    });
  },
  nextPair: function() {
    if (this.learningPhase()) {
      return this.props.pairs[this.props.currentLearning + 1];
    } else {
      return this.props.pairs[this.props.currentTest + 1];
    }
  },
  renderPreloader: function() {
    var pair;
    if (pair = this.nextPair()) {
      return div({
        style: {
          display: 'none'
        }
      }, _.map(pair, function(url) {
        return img({
          src: url,
          key: url,
          className: 'observedImage'
        });
      }));
    }
  }
});

gameInitialState = {
  started: false
};

game = function(state, action) {
  if (state == null) {
    state = gameInitialState;
  }
  switch (action.type) {
    case 'startGame':
      return dup(state, startingGameState());
    case 'newGame':
      return dup(gameInitialState);
    case 'nextLearning':
      if (state.currentLearning + 1 < state.pairs.length) {
        return dup(state, {
          currentLearning: state.currentLearning + 1
        });
      } else {
        return dup(state, prepareTesting(state.pairs));
      }
      break;
    case 'nextTest':
      if (state.currentTest + 1 < state.pairs.length) {
        return dup(state, {
          currentTest: state.currentTest + 1
        });
      } else {
        return dup(state, {
          finished: true
        });
      }
      break;
    case 'wrongAnswer':
      return dup(state, {
        wrongAnswer: true
      }, wrongAnswerState());
    case 'clearWrongAnswer':
      return dup(state, {
        wrongAnswer: false
      });
    default:
      return state;
  }
};

startingGameState = function() {
  return {
    started: true,
    phase: 'learning',
    currentLearning: -1,
    pairs: combinePairs()
  };
};

# Go to subreddit, use compact view and use although be sure to remove leading and trailing double quotes... also should scroll down til you've grabbed enough:
#tmp = [];
#document.querySelectorAll("a").forEach(function(data){
#   if(data.href.indexOf("imgur") > -1 || data.href.indexOf("i.redd.it") > -1) tmp.push(data.href);
#});
#"'" + tmp.join("', '") + "'"

gxs = [ #https://www.reddit.com/r/gentlemanboners/top/?t=all
  'http://i.imgur.com/N86wM6M.jpg', 'http://i.imgur.com/iMyjc93.jpg', 'http://i.imgur.com/cVI2Nmv.jpg', 'https://i.redd.it/1as20xencdcz.jpg', 'https://i.redd.it/lzyidfhfnmiy.jpg', 'http://i.imgur.com/08JeVhR.jpg', 'http://i.imgur.com/Cfc9o6I.jpg', 'http://i.imgur.com/ifd9xWG.jpg', 'https://i.redd.it/5594reu6n1uy.jpg', 'https://i.imgur.com/hNNB6pd.jpg', 'http://i.imgur.com/WBGaAUo.jpg', 'http://i.imgur.com/jOVnt6O.jpg', 'http://i.imgur.com/nste100.jpg', 'https://i.redd.it/1omyze59v8nz.jpg', 'http://i.imgur.com/hhOoyrI.jpg', 'http://i.imgur.com/cXy23G2.jpg', 'https://i.imgur.com/1kFcpn4.png', 'https://i.redd.it/r4q5kyfvi7201.jpg', 'http://i.imgur.com/UxJHXyZ.jpg', 'http://i.imgur.com/zOAuIDp.jpg', 'https://i.redd.it/cr8txm77z6sy.jpg', 'https://i.redd.it/u49pzegjlkd01.jpg', 'https://i.imgur.com/1H6cC8A.jpg', 'https://imgur.com/0ijkahb', 'https://imgur.com/0ijkahb', 'https://imgur.com/0ijkahb', 'http://i.imgur.com/SkSQddH.jpg', 'https://i.imgur.com/Lru4r.jpg', 'https://i.imgur.com/dnOj5X5.jpg', 'http://i.imgur.com/AzxD1j5.jpg', 'http://i.imgur.com/dpHUKyZ.jpg', 'http://imgur.com/yo4wj4V', 'https://i.redd.it/t0kbe03h00jy.jpg', 'http://i.imgur.com/8ba0zq8.jpg', 'https://i.redd.it/36zg0iif10zx.jpg', 'https://i.redd.it/pr1ktq1ci9jz.jpg', 'http://i.imgur.com/q6j0Dmfh.jpg', 'https://i.redd.it/l9x9joxmajoy.jpg', 'http://i.imgur.com/domTG0T.jpg', 'https://i.redd.it/9j6ylfj45xaz.jpg', 'https://i.redd.it/umevsp2ykvgz.jpg', 'https://i.redd.it/b4bvnac1szzy.jpg', 'https://i.redd.it/2h3avw9rsfvy.jpg', 'http://i.imgur.com/W5EjnPB.jpg', 'https://i.redd.it/od3r97j37nlz.jpg', 'https://i.imgur.com/wJPScco.jpg', 'http://imgur.com/BkPeJbf', 'http://imgur.com/BkPeJbf', 'http://imgur.com/BkPeJbf', 'http://i.imgur.com/9ANzP31.jpg', 'http://i.imgur.com/KYn741e.jpg', 'http://i.imgur.com/RylZJiI.jpg', 'https://i.redd.it/djqg4o1ep02z.jpg', 'https://i.redd.it/06ut99iclpry.jpg', 'http://i.imgur.com/md7H7tK.jpg', 'http://i.imgur.com/sZYoKGo.jpg?2', 'https://i.imgur.com/3ru8hGc.jpg', 'https://i.redd.it/lzdnjylm4wry.jpg', 'https://i.redd.it/zj2ia0sjnljy.jpg', 'http://imgur.com/9HUnovl', 'http://imgur.com/9HUnovl', 'http://imgur.com/9HUnovl', 'http://i.imgur.com/mAgSiFe.jpg', 'http://i.imgur.com/C9ypHza.jpg', 'http://i.imgur.com/mywvQ0n.jpg', 'https://i.redd.it/k2vzkodp0ed01.jpg', 'https://i.redd.it/sjnpr070r2401.jpg', 'http://i.imgur.com/Pds9CUj.jpg', 'http://i.imgur.com/e4UroIj.jpg', 'https://i.redd.it/8npaz938grvz.jpg', 'http://i.imgur.com/vdQnIdQ.jpg', 'http://i.imgur.com/hM024sC.jpg', 'http://i.imgur.com/tTEFcNo.jpg', 'http://i.imgur.com/saWmnUQ.jpg', 'http://imgur.com/ntFYKON', 'http://imgur.com/ntFYKON', 'http://imgur.com/ntFYKON', 'https://i.imgur.com/QK5pdDV.jpg', 'https://i.redd.it/wdvtsq4m6kay.jpg', 'https://i.imgur.com/G6ApHKo.jpg', 'http://i.imgur.com/MO25e0i.jpg', 'https://i.redd.it/hopx3ms1g4ny.jpg', 'http://i.imgur.com/YXadF04.jpg', 'http://i.imgur.com/IxxbeT4.jpg', 'https://i.redd.it/ox8zvu1l0amx.jpg', 'https://i.redd.it/ni8w0jkfplhy.jpg', 'http://i.imgur.com/dy1Og22.jpg', 'https://i.redd.it/mswn35irzp101.jpg', 'http://i.imgur.com/nRTqz9V.jpg', 'http://i.imgur.com/8RdWlAx.jpg', 'http://i.imgur.com/V2gVahs.jpg', 'https://i.redd.it/rsmw5egwbzhz.jpg', 'http://i.imgur.com/jNTHBq2.jpg', 'http://imgur.com/YBX6uEG', 'http://imgur.com/YBX6uEG', 'http://imgur.com/YBX6uEG', 'http://i.imgur.com/HdxqRLH.jpg', 'http://i.imgur.com/wqvSt5X.jpg', 'https://i.redd.it/ov8c7rojly7z.jpg', 'http://i.imgur.com/5dsygTM.jpg', 'http://i.imgur.com/MhFb7SJ.jpg', 'https://i.redd.it/59b964www3iz.jpg', 'https://i.redd.it/sh1lsqyityax.jpg', 'https://i.imgur.com/Da8KQDz.jpg', 'http://i.imgur.com/6fF3u5I.jpg', 'http://i.imgur.com/tYANYvX.jpg', 'https://i.redd.it/krluw23647911.jpg', 'http://i.imgur.com/7cCn7NH.jpg', 'http://i.imgur.com/aeGigsT.jpg', 'https://i.redd.it/bczsveg6tnnx.jpg', 'https://i.redd.it/bglvhezkeqrz.jpg', 'https://i.redd.it/zkullqhwcmzx.jpg', 'https://i.imgur.com/eIEmlrc.jpg', 'https://i.redd.it/ss07prxjsjwz.jpg', 'https://i.redd.it/evx7s3aykk401.jpg', 'https://i.imgur.com/OZI7VF6.jpg', 'https://i.imgur.com/tP0Vi6R.jpg', 'https://i.imgur.com/YztX9sy.jpg', 'https://i.redd.it/wrtq1rwp770y.jpg', 'https://i.redd.it/fsmwvc5pybaz.jpg', 'https://imgur.com/wnYrTWg', 'https://imgur.com/wnYrTWg', 'https://imgur.com/wnYrTWg', 'http://i.imgur.com/IPkENSe.jpg', 'https://i.redd.it/uvkloq6xkvc01.jpg', 'https://i.imgur.com/seBINnO.jpg', 'https://i.imgur.com/ueHDMi7.jpg', 'https://i.imgur.com/5kTt6vG.jpg', 'https://i.redd.it/op3peff049by.jpg', 'http://i.imgur.com/GCeZAx3.jpg', 'http://i.imgur.com/X8EaHML.jpg', 'https://i.imgur.com/thk1WNN.jpg', 'http://i.imgur.com/VoMQHZe.jpg', 'http://i.imgur.com/eZeYygm.jpg', 'https://i.redd.it/kkddspajim1z.jpg', 'http://imgur.com/ea2f8Fw', 'https://i.redd.it/7omk3bckmzc21.jpg', 'http://i.imgur.com/g68Lo.jpg', 'http://i.imgur.com/axEJvuW.jpg', 'https://i.redd.it/o9rdfxp6ghrz.jpg', 'http://i.imgur.com/p86WWkw.jpg', 'http://imgur.com/xPmTXZq', 'http://imgur.com/xPmTXZq', 'http://imgur.com/xPmTXZq', 'http://i.imgur.com/Kju5Fbk.jpg', 'http://i.imgur.com/fNXmMgm.jpg', 'http://i.imgur.com/9NBUMbs.jpg', 'https://i.imgur.com/1c5eitM.jpg', 'https://i.redd.it/3siea2qdgdtz.jpg', 'http://i.imgur.com/P6cTTr1.jpg', 'https://i.imgur.com/1ORw5UZ.jpg', 'https://i.redd.it/bbjziqlp5g401.jpg', 'https://i.redd.it/t89ynmfy967z.jpg', 'https://imgur.com/9WsuQDo', 'https://imgur.com/9WsuQDo', 'https://imgur.com/9WsuQDo', 'https://i.redd.it/cuu4yb0qcs9z.jpg', 'https://i.imgur.com/YWbdUPn.jpg', 'https://i.imgur.com/zCW6JBY.jpg', 'https://i.redd.it/118qd5tsjzzx.jpg', 'http://i.imgur.com/ZWYFPXV.jpg', 'http://i.imgur.com/1oERntf.jpg', 'https://i.redd.it/zsfmb2gin2l11.jpg', 'https://i.redd.it/vnpqnhpzq4e01.jpg', 'https://i.redd.it/n3s2m72n6z511.jpg', 'https://i.redd.it/xlnrz709br1z.jpg', 'https://i.redd.it/5car01h9qq6y.jpg', 'http://i.imgur.com/eCJ6F7y.jpg', 'https://i.imgur.com/5zpTOy8.jpg', 'http://i.imgur.com/rjNKDuA.jpg', 'http://i.imgur.com/44b1OQi.jpg', 'https://i.redd.it/ga4gmvn23ea21.jpg', 'https://i.redd.it/pwdlgol3e6311.jpg', 'http://i.imgur.com/PaOnl9y.jpg', 'https://i.imgur.com/y55eKCd.jpg', 'https://i.redd.it/q0p2ogzkynq01.jpg', 'https://i.imgur.com/3z9PEx5.jpg', 'https://i.imgur.com/eoSxIZK.png', 'https://i.redd.it/guijdpm6sdn11.jpg', 'http://imgur.com/HkUveSQ', 'http://imgur.com/HkUveSQ', 'http://imgur.com/HkUveSQ', 'https://i.redd.it/4ba5j7fzyny11.jpg', 'http://imgur.com/tXFudO9', 'http://imgur.com/tXFudO9', 'http://imgur.com/tXFudO9', 'https://i.imgur.com/DejMNt1.jpg', 'https://i.redd.it/0aiiflrtg7i01.jpg', 'https://i.imgur.com/lRDST2n.jpg', 'https://i.imgur.com/vIpR0hF.jpg', 'https://i.redd.it/u7wjqp6qmy211.jpg', 'http://i.imgur.com/Hd7BqOa.jpg', 'https://i.redd.it/ii977mz1ix9z.jpg', 'https://i.redd.it/xuxrbuy4zh6z.jpg', 'https://i.redd.it/4onjmi1vktrx.jpg', 'https://i.redd.it/pecjy7drlxpy.jpg', 'https://i.redd.it/rhda7fjzl7d01.jpg', 'http://i.imgur.com/hSRcN5B.jpg', 'http://i.imgur.com/mWAwBdq.jpg', 'http://i.imgur.com/kXrk4p7.jpg', 'https://i.redd.it/t6jq0n418nxz.jpg', 'http://i.imgur.com/DKl8YX5.jpg', 'https://i.redd.it/tckxsgmk76y01.jpg', 'http://i.imgur.com/cBsjYCu.jpg', 'http://i.imgur.com/e0yrDfC.jpg', 'http://i.imgur.com/PV55o0T.jpg', 'https://i.imgur.com/5j5Ag3X.jpg', 'https://i.redd.it/vjk3cbsqt1yy.jpg', 'http://i.imgur.com/hQ1iaCN.jpg', 'https://i.imgur.com/h0a4mWk.jpg', 'https://i.imgur.com/aGu1K9p.jpg', 'https://i.imgur.com/Nw2ObZq.jpg', 'http://i.imgur.com/iT0r61Z.jpg', 'http://i.imgur.com/IgIdYrQ.jpg', 'https://i.redd.it/aidzuc11c6xx.jpg', 'https://i.redd.it/204m2fxev4ez.jpg', 'https://i.redd.it/1d4mozummxw01.jpg', 'https://i.redd.it/z3pat53x8hk41.jpg', 'https://i.redd.it/32qzuvwv6jfz.jpg', 'http://i.imgur.com/fensBVZ.jpg', 'http://i.imgur.com/3ybxsHd.jpg', 'http://i.imgur.com/FZXmarl.jpg', 'https://i.redd.it/ml38zclxoomz.jpg', 'https://i.redd.it/uxwoxbi2pq901.jpg', 'http://i.imgur.com/ZxHSrVt.jpg', 'http://i.imgur.com/cULQMxH.jpg', 'http://i.imgur.com/Kjyy7xQ.jpg', 'https://i.redd.it/9j98gdp7xkh01.jpg', 'http://i.imgur.com/UhzC7v8.jpg', 'http://i.imgur.com/nylcgPt.jpg', 'http://i.imgur.com/gxGSoKe.jpg', 'https://i.redd.it/74gb8eq7w0yz.jpg', 'https://i.redd.it/3z2grlqvas5y.jpg', 'http://i.imgur.com/9ljwhfK.jpg', 'https://i.redd.it/g9tc3tfivrb21.jpg', 'https://i.redd.it/8niqykmhz0gy.jpg', 'http://imgur.com/TL5Fi9q', 'http://imgur.com/TL5Fi9q', 'http://imgur.com/TL5Fi9q', 'https://i.redd.it/b010uag3q9wy.jpg', 'http://i.imgur.com/KXlP5NL.jpg', 'http://i.imgur.com/gAHQ58y.jpg', 'http://imgur.com/7pdUkhE', 'http://imgur.com/7pdUkhE', 'http://imgur.com/7pdUkhE', 'https://i.redd.it/go1e46i1u5v01.jpg', 'http://i.imgur.com/l8AdBXP.jpg', 'http://imgur.com/Ze2omhB', 'http://imgur.com/Ze2omhB', 'http://imgur.com/Ze2omhB'
]

cxs = [ #https://www.reddit.com/r/ratemycock/top/?t=all
  'https://i.redd.it/ogm50ijwvu451.jpg', 'https://i.redd.it/qzlfnptjbcx31.jpg', 'https://i.redd.it/6xo0vfvzd7n61.jpg', 'https://i.redd.it/yytwt0js2bl61.jpg', 'https://i.redd.it/nybvahfka6p61.jpg', 'https://i.redd.it/s12cprywl6t51.jpg', 'https://i.imgur.com/BET14JY.png', 'https://i.redd.it/cd67re6z7ey41.jpg', 'https://i.redd.it/ysdk3mkt4kg51.jpg', 'https://i.redd.it/13nrks6fkj561.jpg', 'https://i.redd.it/4qkxvlqdlkl51.jpg', 'https://i.redd.it/58laypsxk8h61.jpg', 'https://i.redd.it/elnrwkxh97q61.jpg', 'https://i.redd.it/e4bb75jzid151.jpg', 'https://i.redd.it/irlhjbdqtyo61.jpg', 'https://i.redd.it/r4sbwxgad9q51.jpg', 'https://i.redd.it/wavjb99munl61.jpg', 'https://i.redd.it/fei5niix0gm31.jpg', 'https://i.redd.it/kbikz2mfpoc41.jpg', 'https://i.redd.it/lerwkrg9rfn41.jpg', 'https://i.redd.it/gj4i08l7ncj61.jpg', 'https://i.redd.it/d01rfhjs8dr61.jpg', 'https://i.redd.it/cj9m05u3ndp31.jpg', 'https://i.imgur.com/QtckgLr.jpg', 'https://i.redd.it/oessrrgbwyq61.jpg', 'https://i.redd.it/z26yschghga31.jpg', 'https://i.redd.it/bfvfdqvogm961.jpg', 'https://i.imgur.com/hFSegdG.png', 'https://i.redd.it/hk012nrfouw41.jpg', 'https://i.redd.it/6bkp4emoemb51.jpg', 'https://i.redd.it/i33wf0exfad61.jpg', 'https://i.redd.it/1dyf8euchak61.jpg', 'https://i.imgur.com/0FPbAo8.jpg', 'https://i.redd.it/04l9duqvy9t31.jpg', 'https://i.redd.it/lvhanr9u7g061.jpg', 'https://i.redd.it/ui6ml04j8hf61.jpg', 'https://i.redd.it/86p9sr3wp0a51.jpg', 'https://i.redd.it/8w86fty6rcq61.jpg', 'https://i.redd.it/c7qpw7v05ma51.jpg', 'https://i.redd.it/oiipt2x7oy651.jpg', 'https://i.redd.it/qfh6xcj256161.jpg', 'https://i.imgur.com/waMdYGa.jpg', 'https://i.redd.it/zxsm7cpm81g61.jpg', 'https://i.redd.it/wxhdypt14rt51.jpg', 'https://i.redd.it/8wy0zs5vbha51.jpg', 'https://i.redd.it/fqwk1g1umb051.jpg', 'https://i.redd.it/aanv0lra4jq61.jpg', 'https://i.redd.it/h9ytix6esxd61.jpg', 'https://i.redd.it/ibqhxs44m3441.jpg', 'https://i.redd.it/dy4bsxvopkc61.jpg', 'https://i.redd.it/az4hl5mlff661.jpg', 'https://i.redd.it/efjfxostf5i51.jpg', 'https://i.redd.it/4l4vtnlu88j51.jpg', 'https://i.redd.it/d77g374jwxm61.jpg', 'https://i.redd.it/1x6uey0uz8651.jpg', 'https://i.imgur.com/0AeIULZ.jpg', 'https://i.redd.it/fkeh5rgdt8l51.jpg', 'https://i.redd.it/pmnssmbee1m61.jpg', 'https://i.redd.it/64bb2lkxnj451.jpg', 'https://i.redd.it/4fkzk7svrew41.jpg', 'https://i.redd.it/r9db0vg6kpz51.jpg', 'https://i.redd.it/qvm5r2pnyub51.jpg', 'https://i.redd.it/zasintxugy961.jpg', 'https://i.redd.it/tz1jw2dyshm51.png', 'https://i.redd.it/gjtpzwxeqzk61.jpg', 'https://i.redd.it/b7bqhrdtiub61.jpg', 'https://i.redd.it/uy4yohzq4e961.jpg', 'https://i.redd.it/wosk8jv8gso61.jpg', 'https://i.redd.it/zpv94qnw6qi61.jpg', 'https://i.redd.it/qvovbvsrumn61.jpg', 'https://i.redd.it/szdz7r4bx5561.jpg', 'https://i.redd.it/l3lpt1plpdb61.jpg', 'https://i.redd.it/kxpt0md47si51.jpg', 'https://i.redd.it/fkgwil6oqpw51.jpg', 'https://i.redd.it/vbrmap1ioyl61.jpg', 'https://i.redd.it/kpsrhlc7qzp61.jpg', 'https://i.redd.it/m53ewzvvnek61.jpg', 'https://i.redd.it/znad6adcut951.jpg', 'https://i.redd.it/w4m6zuqlgje61.jpg', 'https://i.redd.it/sp190bs98rr61.jpg', 'https://i.redd.it/2j4n9u51v2g31.jpg', 'https://i.redd.it/8qnq41zdu1v51.jpg', 'https://i.redd.it/s4o5zh3r4uj61.jpg', 'https://i.redd.it/tlylbjwoqki51.jpg', 'https://i.redd.it/hmj1sbvx3xa61.jpg', 'https://i.redd.it/6r0mmiu4erq61.jpg', 'https://i.redd.it/zx9heauenqb61.jpg', 'https://i.redd.it/lqj3f22twdh61.jpg', 'https://i.redd.it/3n6stoj8lpx51.jpg', 'https://i.redd.it/yoih7morll051.jpg', 'https://i.redd.it/7mc55ig1cnt51.jpg', 'https://i.redd.it/t5y2cg52re861.jpg', 'https://i.redd.it/4v70lmkj0tn51.jpg', 'https://i.redd.it/9ffw2ihn6oq51.jpg', 'https://i.redd.it/9s8vr94y7af51.jpg', 'https://i.redd.it/gqppjsaobvr21.jpg', 'https://i.redd.it/if1xarh11zn61.jpg', 'https://i.redd.it/1iad7sv0zdm61.jpg', 'https://i.redd.it/xi44ssrj51s41.jpg', 'https://i.imgur.com/Lxm2Fgb.jpg', 'https://i.redd.it/k7niydg9uc661.jpg', 'https://i.redd.it/05sof4xxhm861.jpg', 'https://i.redd.it/owidnkxygr461.jpg', 'https://i.redd.it/djrk7wenum651.jpg', 'https://i.redd.it/u0zr9bwbua161.jpg', 'https://i.redd.it/8psx7lj1a0z51.jpg', 'https://i.redd.it/di5pcc5b50j51.jpg', 'https://i.redd.it/hfs7jardghg61.jpg', 'https://i.redd.it/i8lhzb88ewa61.jpg', 'https://i.redd.it/5imhpqhv5sd61.jpg', 'https://i.redd.it/mit28gn5nat51.jpg', 'https://i.redd.it/577wv30854q51.jpg', 'https://i.redd.it/v85gcxnj47v41.jpg', 'https://i.redd.it/jv48bvxirqu51.jpg', 'https://i.redd.it/tzcp1obzquq41.jpg', 'https://i.redd.it/6vex9d9yyb751.jpg', 'https://i.redd.it/99cf4f6900861.jpg', 'https://i.redd.it/cxi08drdt2r61.jpg', 'https://i.imgur.com/4uY23BC.jpg', 'https://i.redd.it/f2e4ikc2th821.jpg', 'https://i.redd.it/xppg11avx1s61.jpg', 'https://i.redd.it/gp4uksijf0231.jpg', 'https://i.redd.it/c9t0s4rldgo61.jpg', 'https://i.redd.it/knmj71lvmvr61.jpg', 'https://i.redd.it/f5xj5fi16pe61.jpg', 'https://i.redd.it/e2ezsfcnqn441.jpg', 'http://imgur.com/S9LCzgW', 'http://imgur.com/S9LCzgW', 'http://imgur.com/S9LCzgW', 'https://i.redd.it/lccbtf3d8fu41.jpg', 'https://i.redd.it/z2ficscgyxv41.jpg', 'https://i.redd.it/3cle6uyntsa61.jpg', 'https://i.redd.it/vu9mnzrjmpm61.jpg', 'https://i.redd.it/q43jjx96bl661.jpg', 'https://i.redd.it/fuff1fyowgp41.jpg', 'https://i.redd.it/t85jf4sw15g61.jpg', 'https://i.redd.it/ib8x09hyhvt51.jpg', 'https://i.imgur.com/735DRYF.jpg', 'https://i.redd.it/pv75ha2jbgj61.jpg', 'https://i.redd.it/ln014x3i9tu41.jpg', 'https://i.redd.it/9sicldlwq3l61.jpg', 'https://i.redd.it/v0sxofy4ra441.jpg', 'https://i.redd.it/f3aaht1pywi61.jpg', 'https://i.redd.it/pimb9ddwm4e61.jpg', 'https://i.redd.it/399ir93hr2x51.jpg', 'https://i.redd.it/hhkve7ihje051.jpg', 'https://i.redd.it/wzn29cz6pir51.jpg', 'https://i.redd.it/thdv4sfc93j51.jpg', 'https://i.redd.it/xobc5ln3g9j61.jpg', 'https://i.redd.it/yoc7ah3xr1a61.jpg', 'https://i.redd.it/mibglknfzlp61.jpg', 'https://i.redd.it/jxbyluul7tj51.jpg', 'https://i.redd.it/pw3pe5vpqnq61.jpg', 'https://i.redd.it/jh1r4mgompd61.jpg', 'https://i.redd.it/fbgy48ih3vx31.jpg', 'https://i.redd.it/evlwrayhqjq31.jpg', 'https://i.imgur.com/7aLxmcj.jpg', 'https://i.redd.it/3mi6ev9qm0h61.jpg', 'https://i.redd.it/8epjgjbqymc51.jpg', 'https://i.imgur.com/t961YsW.jpg', 'https://i.redd.it/miox2zlrtu651.jpg', 'https://i.redd.it/n9ara0625f461.jpg', 'https://i.redd.it/hicugdhpq4961.jpg', 'https://i.redd.it/hyoqgz1jw0061.jpg', 'https://i.redd.it/qoo2irml5lu41.jpg', 'https://i.redd.it/umiay858o5t41.jpg', 'https://i.redd.it/46trn6q0f8b51.jpg', 'https://i.redd.it/xjc3ssm773f61.jpg', 'https://imgur.com/JOuXEck', 'https://i.redd.it/xdxcl7if8uv41.jpg', 'https://i.redd.it/a8q1mdpibaf31.jpg', 'https://i.redd.it/7ndg6u5brrl61.jpg', 'https://i.redd.it/01qooqffv8y51.jpg', 'https://i.redd.it/33fqv24o0en51.jpg', 'https://i.redd.it/q047qdvphbm51.jpg', 'https://i.redd.it/jw220h72zsc61.jpg', 'https://i.redd.it/gud4ek6f6f761.jpg', 'https://i.redd.it/ockh9x8fixm21.jpg', 'https://i.redd.it/qjullnedjio41.jpg', 'https://i.redd.it/knl9nyk4ntc51.jpg', 'https://i.redd.it/awhtlt3uc4851.jpg', 'https://i.redd.it/74xa3esjer861.jpg', 'https://i.redd.it/rf8alb8idqe51.jpg', 'https://i.redd.it/e2gecx77epc61.jpg', 'https://i.redd.it/k45vet7dmqp31.jpg', 'https://i.redd.it/nvlg2m09fgk51.jpg', 'https://i.redd.it/tujklw5ywh151.jpg', 'https://i.redd.it/t3lbjgkl5cz31.jpg', 'https://i.redd.it/13g261m7ii961.jpg', 'https://i.redd.it/dsftejqxksf41.jpg', 'https://i.redd.it/npoer4v6g7n51.png', 'https://i.redd.it/rpg17l7f9ex41.jpg', 'https://i.redd.it/6u8cug5qxmr61.jpg', 'https://i.redd.it/co6hliudfc651.jpg', 'https://i.redd.it/zjzesoneslg41.jpg', 'https://i.redd.it/h0009szkzv961.jpg', 'https://i.redd.it/72iwou2zuim61.jpg', 'https://i.redd.it/48m6uympvmt41.jpg', 'https://i.redd.it/z34cdtc8dlj51.jpg', 'https://i.redd.it/dr5q776p4b951.jpg', 'https://i.redd.it/o9g279b75bw41.jpg', 'https://i.redd.it/6cv72ebb91t41.jpg', 'https://i.redd.it/ey454t8e8ic61.jpg', 'https://i.redd.it/bjqn5qjgcoq41.jpg', 'https://i.imgur.com/bMG7Bvm.jpg', 'https://i.redd.it/93oiiz6l4l741.jpg', 'https://i.redd.it/giz4m980sym31.jpg', 'https://i.redd.it/qtemtyjgzog51.jpg', 'https://i.imgur.com/HgTtgC5.jpg', 'https://i.redd.it/3qzh8fc60kr61.jpg', 'https://i.redd.it/1nc6df6fq7o41.jpg'
]
combinePairs = function() {
  var numberOfPairs, sc, sg;
  numberOfPairs = store.getState().gameParams.numberOfPairs;
  sg = _.shuffle(gxs).slice(0, numberOfPairs);
  sc = _.shuffle(cxs).slice(0, numberOfPairs);
  return _.map(_.zip(sg, sc), function(a) {
    return [a[0]].concat(getRandomsCxs(a[1]));
  });
};

prepareTesting = function(pairs) {
  return {
    phase: 'testing',
    currentTest: -1,
    pairs: _.shuffle(pairs)
  };
};

wrongAnswerState = function() {
  switch (store.getState().gameParams.onWrongAnswer) {
    case 'retry':
      return {};
    case 'restart':
      return {
        currentTest: -1
      };
    case 'learning':
      return {
        currentLearning: -1,
        phase: 'learning'
      };
    case 'randomize':
      return this.startingGameState();
  }
};

getRandomsCxs = function(cx) {
  var rc, res;
  res = [cx];
  while (res.length < 3) {
    rc = _.sample(cxs);
    if (!_.contains(res, rc)) {
      res.push(rc);
    }
  }
  return res;
};

local = !top.location.hostname;

gameParamsDefaults = {
  error: false,
  numberOfPairs: gxs.length,
  onWrongAnswer: 'restart'
};

parseQueryParams = function() {
  return _.object(_.map(top.location.search.substr(1).split(/&/), function(kv) {
    return kv.split(/=/);
  }));
};

gameParamsInitialState = function() {
  var ref;
  return _.assign({}, gameParamsDefaults, JSON.parse(((ref = window.localStorage) != null ? ref.gameParamsMT : void 0) || "{}"), parseQueryParams());
};

isGtZero = function(val) {
  return _.isFinite(val) && +val > 0;
};

gameParamValid = function(prop, val, state) {
  if (prop === 'random') {
    if (!(isGtZero(state.min) && isGtZero(state.max))) {
      return false;
    }
  } else {
    if (!isGtZero(val)) {
      return false;
    }
  }
  if (prop === 'min') {
    return +val <= +state.max;
  } else if (prop === 'max') {
    return +val >= +state.min;
  } else if (prop === 'random') {
    return +state.min <= +state.max;
  } else {
    return true;
  }
};

saveDup = function() {
  var newState, objs, ref;
  objs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  newState = dup.apply(null, objs);
  if ((ref = window.localStorage) != null) {
    ref.gameParamsMT = JSON.stringify(newState);
  }
  return newState;
};

gameParams = function(state, action) {
  if (state == null) {
    state = gameParamsInitialState();
  }
  switch (action.type) {
    case 'numberOfPairsChanged':
      return saveDup(state, {
        numberOfPairs: action.value
      });
    case 'onWrongAnswerChanged':
      return saveDup(state, {
        onWrongAnswer: action.value
      });
    default:
      return state;
  }
};

ref = React.DOM, a = ref.a, br = ref.br, button = ref.button, div = ref.div, form = ref.form, img = ref.img, h1 = ref.h1, h2 = ref.h2, h3 = ref.h3, h4 = ref.h4, input = ref.input, label = ref.label, li = ref.li, option = ref.option, p = ref.p, select = ref.select, small = ref.small, span = ref.span, strong = ref.strong, ul = ref.ul;

el = React.createElement;

make = function(prop, val) {
  var obj;
  obj = {};
  obj[prop] = val;
  return obj;
};

dup = function() {
  var objs, state;
  state = arguments[0], objs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  return _.assign.apply(_, [{}, state].concat(slice.call(objs)));
};

memoryLogic = Redux.combineReducers({
  gameParams: gameParams,
  game: game
});

store = Redux.createStore(memoryLogic);

MTMain = React.createClass({
  render: function() {
    return div({
      className: "container"
    }, h1({}, 'Babe/Cock Memory Test'), this.props.game.started ? el(GameComponent, this.props.game) : el(ConfigForm, this.props.gameParams));
  }
});

render = function() {
  return ReactDOM.render(el(MTMain, store.getState()), document.getElementById('content'));
};

store.subscribe(render);

render();

if (local) {
  store.subscribe(function() {
    return console.log('current state', JSON.stringify(store.getState()));
  });
}

speak = function(task) {
  if (store.getState().gameParams.speechEnabled) {
    responsiveVoice.speak(task, "UK English Female", {
      rate: 0.8
    });
  }
  return task;
};
